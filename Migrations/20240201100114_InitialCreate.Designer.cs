// <auto-generated />
using System;
using Kitty;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kitty.Migrations
{
    [DbContext(typeof(KittySplitDbContext))]
    [Migration("20240201100114_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Kitty.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("KittyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentID");

                    b.HasIndex("KittyID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Kitty.Currency", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CurrencyID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Kitty.Kitty", b =>
                {
                    b.Property<int>("KittyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("SuperKitty")
                        .HasColumnType("INTEGER");

                    b.HasKey("KittyID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("Kitties");
                });

            modelBuilder.Entity("Kitty.KittyMember", b =>
                {
                    b.Property<int>("KittyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("KittyID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("KittyMembers");
                });

            modelBuilder.Entity("Kitty.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Amount")
                        .HasColumnType("REAL");

                    b.Property<float>("AmountSplit")
                        .HasColumnType("REAL");

                    b.Property<string>("ChosenCurrency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("KittyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OwedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionID");

                    b.HasIndex("KittyID");

                    b.HasIndex("UserID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Kitty.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Kitty.Comment", b =>
                {
                    b.HasOne("Kitty.Kitty", "Kitty")
                        .WithMany("Comments")
                        .HasForeignKey("KittyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kitty.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kitty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kitty.Kitty", b =>
                {
                    b.HasOne("Kitty.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Kitty.KittyMember", b =>
                {
                    b.HasOne("Kitty.Kitty", "Kitty")
                        .WithMany("KittyMembers")
                        .HasForeignKey("KittyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kitty.User", "User")
                        .WithMany("KittyMembers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kitty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kitty.Transaction", b =>
                {
                    b.HasOne("Kitty.Kitty", "Kitty")
                        .WithMany("Transactions")
                        .HasForeignKey("KittyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kitty.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kitty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Kitty.Kitty", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("KittyMembers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Kitty.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("KittyMembers");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
